{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "mpjnfZfAsysjf86cC4sex",
      "type": "text",
      "x": 269.734375,
      "y": -783.29296875,
      "width": 1364.831298828125,
      "height": 3290,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a0",
      "roundness": null,
      "seed": 1067981464,
      "version": 5024,
      "versionNonce": 1033441000,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1715291531347,
      "link": null,
      "locked": false,
      "text": "Capacity Estimation\nIn capacity estimation , you need to reasonably close to the answer that is deviation by\na factor of 10 , 100 is fine but 1000 is questionable\nThe deeper that you go with assumptions the more are your chances of going wrong why ,\nbecause if you make an assumptions at the lower level they cause big changes at the upper\nlevel\nAlways take care of (fault tolerance and making copies)\nTake care of making sure you give more resources than the peak load\nBest to keep looking at the interviewer to see if you are making some wrong assumptions and \nalso clarify the solution\nStorage Estimation\nLets understand this through an example of youtube.com\n1. How much space required ?\nsince it is a dynamic service a better question is how much space is required in a day\n\nTotal Number of videos to be uploaded in a day\n=\n(total number of people uploading videos in a day ) * (videos uploaded by 1 person each day)\nAssumption :\nTotal Number of users of youtube : 2 B\nA user logs into the site every two days \nDaily Active User : 1 B\nOut of 1000 people visting youtube in a day , 1 is uploading 1 video in a day\n= (1B / 1000) = 1M\n\nTotal Size of video incoming in a day \n= (Avg Size of 1 video) * Total Number of videos to be uploaded in a day * number of copies of\nthe videos that need to be created for fault tolerance and performance perspective * different \nresolution of copies\n\nAverage Size of the video = 60 *(Average Total minutes of video) * frames per second * 1MB *\nAssumptions \nAverage Total minutes of video = 10 min\nframes per second = 25\nAverage Size of video = 60 * 10 *25 * MB = 15000 MB = 15 GB \n--------------------------> Think does that seem logical , no usually 2 hr movies is 4 GB\n--------------------------> Thinking that youtube will compress the things by a factor of 10\nAverage size of the video = (.4/2*60)*10 GB = 30MB    \n\nTotal size of video incoming in a day \n= 30 * (1B/1000) *3*2 = 180 TB  \n \nTotal Number of video memory to be uploaded per sec = ( 180 TB / (24 * 60 * 60))\n= 2GB\n\nCaching Requirement \nYoutube would like to cache thumbnail and the heading , a bigger size is required for thumbnail , \nthumbnail is smaller that some full screen video\nSize of 1 thumbnail = (Size of average image ) / 100 = 1MB/100 = 10KB\n\nOn the RAM we would like to store thumbnail for videos which are most frequently accessed , \nvideos that were mostly and for the videos that were uploaded most recently\nLets say our definition of most recently videos , is the videos which were uploaded in the last\n90days\nCaching Requirement = Cache required for 90 days = total number of videos to be cached * size\nof 1 thumbnail * 2(this is for partition tolerance)\n= 2* 90*total number of incoming videos * 10KB * 2\n=1800 * (1Billion / 1000) *2\n= 1800GB *2\n=3600GB\n\nIf you are having a machine for 64 GB , you would need 60 servers to fulfill the demand\n\nCompute Estimation\nWhat are the operations you do in a compute Read/Write operation , some processing operation \n\ntotal number of videos in a day = (1/1000)*1Billion\nsize of 1 video = ((size of 2 hr video) / (60 * 2))*10 = (.4GB*10)/120 = 33MB\nTotal size incoming per second =  (10^6 * 33 MB)/(24*60*60) * 8(this is for \nduplication) = 127*8 MB\n\nRead operation 1 MB -> 10ms\nWrite operation 1 MB -> 20ms\nProcessing operation 1MB -> 20ms\n50 ms for 1 MB\n\nNumber of cores required = 127 * 50 * .001 * 8  = 48 cores really ????\n  \n\n\n\n\n\n   \n  \n \n\n\n\n\n\n\n\n",
      "fontSize": 28,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Capacity Estimation\nIn capacity estimation , you need to reasonably close to the answer that is deviation by\na factor of 10 , 100 is fine but 1000 is questionable\nThe deeper that you go with assumptions the more are your chances of going wrong why ,\nbecause if you make an assumptions at the lower level they cause big changes at the upper\nlevel\nAlways take care of (fault tolerance and making copies)\nTake care of making sure you give more resources than the peak load\nBest to keep looking at the interviewer to see if you are making some wrong assumptions and \nalso clarify the solution\nStorage Estimation\nLets understand this through an example of youtube.com\n1. How much space required ?\nsince it is a dynamic service a better question is how much space is required in a day\n\nTotal Number of videos to be uploaded in a day\n=\n(total number of people uploading videos in a day ) * (videos uploaded by 1 person each day)\nAssumption :\nTotal Number of users of youtube : 2 B\nA user logs into the site every two days \nDaily Active User : 1 B\nOut of 1000 people visting youtube in a day , 1 is uploading 1 video in a day\n= (1B / 1000) = 1M\n\nTotal Size of video incoming in a day \n= (Avg Size of 1 video) * Total Number of videos to be uploaded in a day * number of copies of\nthe videos that need to be created for fault tolerance and performance perspective * different \nresolution of copies\n\nAverage Size of the video = 60 *(Average Total minutes of video) * frames per second * 1MB *\nAssumptions \nAverage Total minutes of video = 10 min\nframes per second = 25\nAverage Size of video = 60 * 10 *25 * MB = 15000 MB = 15 GB \n--------------------------> Think does that seem logical , no usually 2 hr movies is 4 GB\n--------------------------> Thinking that youtube will compress the things by a factor of 10\nAverage size of the video = (.4/2*60)*10 GB = 30MB    \n\nTotal size of video incoming in a day \n= 30 * (1B/1000) *3*2 = 180 TB  \n \nTotal Number of video memory to be uploaded per sec = ( 180 TB / (24 * 60 * 60))\n= 2GB\n\nCaching Requirement \nYoutube would like to cache thumbnail and the heading , a bigger size is required for thumbnail , \nthumbnail is smaller that some full screen video\nSize of 1 thumbnail = (Size of average image ) / 100 = 1MB/100 = 10KB\n\nOn the RAM we would like to store thumbnail for videos which are most frequently accessed , \nvideos that were mostly and for the videos that were uploaded most recently\nLets say our definition of most recently videos , is the videos which were uploaded in the last\n90days\nCaching Requirement = Cache required for 90 days = total number of videos to be cached * size\nof 1 thumbnail * 2(this is for partition tolerance)\n= 2* 90*total number of incoming videos * 10KB * 2\n=1800 * (1Billion / 1000) *2\n= 1800GB *2\n=3600GB\n\nIf you are having a machine for 64 GB , you would need 60 servers to fulfill the demand\n\nCompute Estimation\nWhat are the operations you do in a compute Read/Write operation , some processing operation \n\ntotal number of videos in a day = (1/1000)*1Billion\nsize of 1 video = ((size of 2 hr video) / (60 * 2))*10 = (.4GB*10)/120 = 33MB\nTotal size incoming per second =  (10^6 * 33 MB)/(24*60*60) * 8(this is for \nduplication) = 127*8 MB\n\nRead operation 1 MB -> 10ms\nWrite operation 1 MB -> 20ms\nProcessing operation 1MB -> 20ms\n50 ms for 1 MB\n\nNumber of cores required = 127 * 50 * .001 * 8  = 48 cores really ????\n  \n\n\n\n\n\n   \n  \n \n\n\n\n\n\n\n\n",
      "lineHeight": 1.25
    },
    {
      "id": "PNf5gtsr2OY6DMkJZh43-",
      "type": "text",
      "x": 1016,
      "y": -1062,
      "width": 228.98391723632812,
      "height": 175,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": null,
      "seed": 1492799976,
      "version": 66,
      "versionNonce": 1809010840,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1715288279824,
      "link": null,
      "locked": false,
      "text": "billion -> B\nMegaByte -> MB\n1MB = 1000KB\n1GB = 1000MB\n",
      "fontSize": 28,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "billion -> B\nMegaByte -> MB\n1MB = 1000KB\n1GB = 1000MB\n",
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}