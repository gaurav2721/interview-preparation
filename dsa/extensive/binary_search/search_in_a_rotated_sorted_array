/*
4 5 6 7 0 1 2

if isLeftInc {
    if present{
        search in left
    }else{
        serach in right
    }
}else{
    if present{
        search in right
    }else{
        search in left
    }
}
*/
func temp(nums []int, target int, low int, high int) int {
	//n:=len(nums)
	if low > high {
		return -1
	} else if low == high {
		if nums[low] == target {
			return low
		}
		return -1
	}
	mid := (low + high) / 2
	isLeftInc := nums[low] < nums[mid]
	//isRightInc:=nums[mid+1]<nums[high]
	if isLeftInc {
		if target >= nums[low] && target <= nums[mid] {
			return temp(nums, target, low, mid)
		} else {
			return temp(nums, target, mid+1, high)
		}
	} else {
		if target >= nums[mid+1] && target <= nums[high] {
			return temp(nums, target, mid+1, high)
		} else {
			return temp(nums, target, low, mid)
		}
	}
}
func search(nums []int, target int) int {
	n := len(nums)
	index := temp(nums, target, 0, n-1)
	return index
}