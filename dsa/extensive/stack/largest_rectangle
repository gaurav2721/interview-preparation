/*
The trick here is that if it is increasing height ,keep on appending to the stack
but if it is decreasing or equal to and then pop the elements one by one and calculate the area
and finally the new element is to be added with last popped elements's index
and then at last calculating larget area for increasing subsequence in stack
*/
type Node struct {
	val   int
	index int
}

func largestRectangleArea(height []int) int {
	n := len(height)
	stack := make([]Node, 0)
	maxArea := 0
	for i := 0; i < n; i++ {
		if len(stack) == 0 {
			stack = append(stack, Node{
				val:   height[i],
				index: i,
			})
			continue
		}
		if height[i] > stack[len(stack)-1].val {
			stack = append(stack, Node{
				val:   height[i],
				index: i,
			})
			continue
		}
		var x Node
		for len(stack) > 0 && height[i] <= stack[len(stack)-1].val {
			x = stack[len(stack)-1]
			maxArea = max(maxArea, (i-x.index)*x.val)
			stack = stack[:len(stack)-1]
		}
		stack = append(stack, Node{
			val:   height[i],
			index: x.index,
		})
	}
	for len(stack) > 0 {
		x := stack[len(stack)-1]
		maxArea = max(maxArea, (n-x.index)*x.val)
		stack = stack[:len(stack)-1]
	}
	fmt.Println("maxArea", maxArea)
	return maxArea
}