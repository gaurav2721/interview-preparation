/*
In this type of problem this structure is important
func combinationSumTemp(candidates []int,target int,index int,out *[]int,output *[][]int){

And for golang
this structure of slice which leads to this condition
        if out!=nil{
            tempOut:=make([]int,len(*out))
            copy(tempOut,*out)
            if !check(tempOut,*output){
                *output=append(*output,tempOut)
            }
            //fmt.Println("add",candidates,target,index,*out,*output)
        }
*/
func IsSame(c []int, nums []int) bool {
	ret := true
	if len(c) != len(nums) {
		return false
	}
	for i, _ := range nums {
		if c[i] != nums[i] {
			ret = false
			break
		}
	}
	return ret
}

func Append(c []int, m *[][]int) {
	for _, nums := range *m {
		if IsSame(c, nums) {
			return
		}
	}
	*m = append(*m, c)
	return
}

func Temp(can []int, target, index int, result []int, m *[][]int) {
	//fmt.Println(target,index,result,m)
	n := len(can)
	if index < 0 || index >= n {
		return
	}

	if target < 0 {
		return
	} else if target == 0 {
		//fmt.Println("target0",target,index,result,m)
		c := make([]int, len(result))
		copy(c, result)
		sort.Ints(c)
		Append(c, m)
		return
	}
	result = append(result, can[index])
	Temp(can, target-can[index], index, result, m)
	result = result[:len(result)-1]
	Temp(can, target, index-1, result, m)
}

func combinationSum(candidates []int, target int) [][]int {
	m := make([][]int, 0)
	Temp(candidates, target, len(candidates)-1, make([]int, 0), &m)
	return m
}