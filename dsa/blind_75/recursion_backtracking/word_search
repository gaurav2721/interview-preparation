/*
ABCEFSADEESE

visited does need to have a pointer as we want to revert it to previous state
*/
func Temp(board [][]byte, word string, i, j, index int, visited [][]bool) bool {
	//fmt.Println(board,word,i,j,index)
	k := len(word)
	m := len(board)
	n := len(board[0])
	if index < 0 || index > k {
		return false
	} else if index == k {
		return true
	}
	if i < 0 || j < 0 || i >= m || j >= n {
		return false
	}
	if !visited[i][j] && board[i][j] == word[index] {
		//fmt.Println("If",board,word,i,j,index)
		visited[i][j] = true
		ret := Temp(board, word, i-1, j, index+1, visited) || Temp(board, word, i, j+1, index+1, visited) || Temp(board, word, i+1, j, index+1, visited) || Temp(board, word, i, j-1, index+1, visited)
		visited[i][j] = false
		return ret
	} else {
		return false
	}
}

func exist(board [][]byte, word string) bool {
	m := len(board)
	n := len(board[0])
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			visited := make([][]bool, m)
			for i := 0; i < m; i++ {
				visited[i] = make([]bool, n)
			}
			if Temp(board, word, i, j, 0, visited) {
				return true
			}
		}
	}

	return false
}