type Node struct {
	val   string
	level int
}

func ladderLength(beginWord string, endWord string, wordList []string) int {
	wordSet := make(map[string]bool)
	for _, word := range wordList {
		wordSet[word] = true
	}

	if _, ok := wordSet[endWord]; !ok {
		return 0
	}

	queue := []Node{{val: beginWord, level: 1}}
	visited := make(map[string]bool)
	visited[beginWord] = true

	for len(queue) > 0 {
		node := queue[0]
		queue = queue[1:]

		word := []rune(node.val)
		for i := 0; i < len(word); i++ {
			original := word[i]
			for c := 'a'; c <= 'z'; c++ {
				if c == original {
					continue
				}
				word[i] = c
				newWord := string(word)
				if newWord == endWord {
					return node.level + 1
				}
				if wordSet[newWord] && !visited[newWord] {
					visited[newWord] = true
					queue = append(queue, Node{val: newWord, level: node.level + 1})
				}
			}
			word[i] = original
		}
	}

	return 0
}
