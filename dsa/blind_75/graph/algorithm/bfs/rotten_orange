// The trick here is to detect that BFS with mapping the time in the queue is going to be important s
// The trick is to find out level using BFS , for visited you can use grid only
type orange struct {
	i int
	j int
	t int
}

func IsValid(grid [][]int, visited [][]bool, i, j int) bool {
	m := len(grid)
	n := len(grid[0])
	if i < 0 || i >= m || j < 0 || j >= n {
		return false
	}
	return (visited[i][j] == false) && (grid[i][j] == 1)
}

func orangesRotting(grid [][]int) int {
	m := len(grid)
	n := len(grid[0])

	q := make([]orange, 0)
	visited := make([][]bool, m)
	for i := 0; i < m; i++ {
		visited[i] = make([]bool, n)
	}

	timestamp := 0
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if grid[i][j] == 2 {
				q = append(q, orange{i: i, j: j, t: timestamp})
			}
		}
	}

	maxTimestamp := 0
	for len(q) > 0 {
		f := q[0]
		if len(q) > 1 {
			q = q[1:]
		} else {
			q = make([]orange, 0)
		}
		visited[f.i][f.j] = true
		maxTimestamp = max(maxTimestamp, f.t)

		if IsValid(grid, visited, f.i+1, f.j) {
			grid[f.i+1][f.j] = 2
			q = append(q, orange{i: f.i + 1, j: f.j, t: f.t + 1})
		}

		if IsValid(grid, visited, f.i-1, f.j) {
			grid[f.i-1][f.j] = 2
			q = append(q, orange{i: f.i - 1, j: f.j, t: f.t + 1})
		}

		if IsValid(grid, visited, f.i, f.j+1) {
			grid[f.i][f.j+1] = 2
			q = append(q, orange{i: f.i, j: f.j + 1, t: f.t + 1})
		}

		if IsValid(grid, visited, f.i, f.j-1) {
			grid[f.i][f.j-1] = 2
			q = append(q, orange{i: f.i, j: f.j - 1, t: f.t + 1})
		}
	}

	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if grid[i][j] == 1 {
				return -1
			}
		}
	}

	return maxTimestamp

}

/*
Layer 2 approach
*/

type Node struct {
	x int
	y int
}

func orangesRotting(grid [][]int) int {
	m := len(grid)
	n := len(grid[0])

	rotten := make([]Node, 0)
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if grid[i][j] == 0 {
				continue
			} else if grid[i][j] == 2 {
				rotten = append(rotten, Node{x: i, y: j})
				grid[i][j] = 3
			}
		}
	}
	rotten = append(rotten, Node{x: math.MaxInt32, y: math.MaxInt32})

	count := 0
	dirX := []int{-1, 0, 1, 0}
	dirY := []int{0, 1, 0, -1}
	for len(rotten) > 0 {
		rot := rotten[0]
		fmt.Println(rot, count)
		rotten = rotten[1:]

		if rot.x == math.MaxInt32 && rot.y == math.MaxInt32 {
			if len(rotten) == 0 {
				break
			}
			count++
			rotten = append(rotten, Node{x: math.MaxInt32, y: math.MaxInt32})
			continue
		}

		for i := 0; i < 4; i++ {
			for j := 0; j < 4; j++ {
				adX := rot.x + dirX[i]
				adY := rot.y + dirY[i]
				if (adX < 0 || adY < 0 || adX >= m || adY >= n) || grid[adX][adY] != 1 {
					continue
				}
				node := Node{x: adX, y: adY}
				rotten = append(rotten, node)
				grid[adX][adY] = 3
			}
		}
	}

	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if grid[i][j] == 1 {
				return -1
			}
		}
	}

	return count
}