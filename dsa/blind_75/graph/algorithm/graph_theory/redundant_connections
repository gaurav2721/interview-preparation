type Node struct {
	parent *Node
	val    int
}

type Graph map[int]*Node

func findParent(node *Node) *Node {
	currNode := node
	var prevNode *Node = nil
	for currNode != nil {
		prevNode = currNode
		currNode = currNode.parent
	}
	return prevNode
}

func link(graph Graph, u, v int) bool {
	node1 := graph[u]
	node2 := graph[v]
	parentNode1 := findParent(node1)
	parentNode2 := findParent(node2)
	if parentNode1 == parentNode2 {
		return false
	}
	parentNode2.parent = parentNode1
	return true
}

func getMax(edges [][]int) int {
	m := 0
	for i := 0; i < len(edges); i++ {
		u := edges[i][0]
		v := edges[i][1]
		m = max(m, u)
		m = max(m, v)
	}
	return m
}

func findRedundantConnection(edges [][]int) []int {
	graph := make(Graph, 0)
	n := getMax(edges)
	for i := 0; i <= n; i++ {
		graph[i] = &Node{
			parent: nil,
			val:    i,
		}
	}
	for i := 0; i < len(edges); i++ {
		u := edges[i][0]
		v := edges[i][1]
		if !link(graph, u, v) {
			return []int{u, v}
		}
	}

	return []int{}
}