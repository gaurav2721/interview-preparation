// Online Go compiler to run Golang program online
// Print "Try programiz.pro" message

/*
For a graph to be a tree , it should not have any cycles and must be conected
*/
package main

import "fmt"

type Node struct {
	val   int
	edges map[int]*Node
}

type Graph map[int]*Node

func detectCycle(val int, prev int, graph Graph, visited map[int]int) bool {
	fmt.Println(val, prev, visited)
	if visited[val] == 0 {
		visited[val] = 1
		cycle := false
		for k, _ := range graph[val].edges {
			if k == prev {
				continue
			}
			if detectCycle(k, val, graph, visited) {
				cycle = true
			}
		}
		return cycle
	}
	return true
}

func buildGraph(n int, e [][]int, graph Graph) {
	for i := 0; i < n; i++ {
		node := &Node{
			val:   i,
			edges: make(map[int]*Node, 0),
		}
		graph[i] = node
	}

	for i := 0; i < len(e); i++ {
		graph[e[i][0]].edges[e[i][1]] = graph[e[i][1]]
		graph[e[i][1]].edges[e[i][0]] = graph[e[i][0]]
	}
}

func main() {
	// n:=5
	// e:=[][]int{
	//     {0,1},
	//     {0,2},
	//     {0,3},
	//     {1,4},
	// }

	n := 5
	e := [][]int{
		{0, 1},
		{1, 2},
		{2, 3},
		{1, 3},
		{1, 4},
	}

	graph := Graph{}
	visited := make(map[int]int, 0)
	isTree := false
	buildGraph(n, e, graph)
	fmt.Println(graph)

	cycle := detectCycle(0, -1, graph, visited)
	if !cycle && len(visited) == n {
		isTree = true
	}

	fmt.Println("isTree", isTree)
}
