// Online Go compiler to run Golang program online
// Print "Try programiz.pro" message

/*
For a graph to be a tree , it should not have any cycles and must be conected

you can check this using union find and cycle detection and the fact that len(edges) == n-1 in a tree 


*/

func FindParent(u int, parent []int) int {
    if u == parent[u] {
        return u // path compression
    }
    parent[u] = FindParent(parent[u], parent)
    return parent[u]
}

func validTree(n int, edges [][]int) bool {
    if len(edges) != n-1 {
        return false
    }

    parent := make([]int, n)
    for i := 0; i < n; i++ {
        parent[i] = i
    }

    for _, edge := range edges {
        u, v := edge[0], edge[1]
        rootU := FindParent(u, parent)
        rootV := FindParent(v, parent)
        if rootU == rootV {
            return false // cycle detected
        }
        parent[rootV] = rootU
    }

    return true // connected & acyclic
}

func dfs(start int,parent int,adList [][]bool,visited []bool)bool{
    //fmt.Println(start,parent,visited)
    if visited[start]{
        return false
    }

    visited[start]=true
    for child,val := range adList[start]{
        if !val{
            continue
        }
        if child==parent{
            continue
        }
        isTree:=dfs(child,start,adList,visited)
        if isTree==false{
            return false
        }
    }

    return true
}

func validTree(n int, edges [][]int) bool {
    adList:=make([][]bool,n)
    for i:=0;i<n;i++{
        adList[i]=make([]bool,n)
    }

    for i:=0;i<len(edges);i++{
        u:=edges[i][0]
        v:=edges[i][1]
        adList[u][v]=true
        adList[v][u]=true
    }

    visited:=make([]bool,n)
    isTree:=dfs(0,-1,adList,visited)

    fmt.Println(isTree,visited)

    if !isTree{
        return false
    }

    for _,val:=range visited{
        if !val{
            isTree=false
            break
        }
    }

    return isTree

}

package main

import "fmt"

type Node struct {
	val   int
	edges map[int]*Node
}

type Graph map[int]*Node

func detectCycle(val int, prev int, graph Graph, visited map[int]int) bool {
	fmt.Println(val, prev, visited)
	if visited[val] == 0 {
		visited[val] = 1
		cycle := false
		for k, _ := range graph[val].edges {
			if k == prev {
				continue
			}
			if detectCycle(k, val, graph, visited) {
				cycle = true
			}
		}
		return cycle
	}
	return true
}

func buildGraph(n int, e [][]int, graph Graph) {
	for i := 0; i < n; i++ {
		node := &Node{
			val:   i,
			edges: make(map[int]*Node, 0),
		}
		graph[i] = node
	}

	for i := 0; i < len(e); i++ {
		graph[e[i][0]].edges[e[i][1]] = graph[e[i][1]]
		graph[e[i][1]].edges[e[i][0]] = graph[e[i][0]]
	}
}

func main() {
	// n:=5
	// e:=[][]int{
	//     {0,1},
	//     {0,2},
	//     {0,3},
	//     {1,4},
	// }

	n := 5
	e := [][]int{
		{0, 1},
		{1, 2},
		{2, 3},
		{1, 3},
		{1, 4},
	}

	graph := Graph{}
	visited := make(map[int]int, 0)
	isTree := false
	buildGraph(n, e, graph)
	fmt.Println(graph)

	cycle := detectCycle(0, -1, graph, visited)
	if !cycle && len(visited) == n {
		isTree = true
	}

	fmt.Println("isTree", isTree)
}
