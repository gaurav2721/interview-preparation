/* 
from the edges we hvae to create an undirected graph and then do dfs
*/

func dfs(graph map[int][]int,visited []bool,x int){
    if visited[x]{
        return
    }
    visited[x]=true

    for _,target:= range graph[x]{
        //fmt.Println(i,target)
        dfs(graph,visited,target)
    }
}

func countComponents(n int, edges [][]int) int {
    visited:=make([]bool,n)
    count:=0
    //fmt.Println(edges)
    graph:=make(map[int][]int,0)
    for i:=0;i<len(edges);i++{
        if _,ok:=graph[edges[i][0]];!ok{
            graph[edges[i][0]]=make([]int,0)
        }
        if _,ok:=graph[edges[i][1]];!ok{
            graph[edges[i][1]]=make([]int,0)
        }
        graph[edges[i][0]]=append(graph[edges[i][0]],edges[i][1])
        graph[edges[i][1]]=append(graph[edges[i][1]],edges[i][0])
    }
    //fmt.Println(graph)
    for i:=0;i<n;i++{
        if !visited[i]{
            count++
            dfs(graph,visited,i)
        }
    }
    return count
}




// Write your code here
package main

import (
	"fmt"
	//"strings"
)

type Node struct {
	val   int
	edges map[int]bool
}

type Graph map[int]*Node

func dfs(graph Graph, i int, visited map[int]bool) {
	//fmt.Println(i,visited)
	_, ok := graph[i]
	if ok && !visited[i] {
		//fmt.Println("visited",i,visited)
		visited[i] = true
		node := graph[i]
		for k, _ := range node.edges {
			if !visited[k] {
				dfs(graph, k, visited)
			}
		}
	}
}

func main() {
	//fmt.Println("main")
	n := 0
	e := 0
	fmt.Scan(&n)
	fmt.Scan(&e)
	graph := Graph{}
	//fmt.Println(n,e,graph)
	for i := 1; i <= n; i++ {
		node := &Node{
			val:   i,
			edges: make(map[int]bool, 0),
		}
		graph[i] = node
	}
	//fmt.Println(n,e,graph)

	for i := 0; i < e; i++ {
		source := 0
		dst := 0
		fmt.Scan(&source)
		fmt.Scan(&dst)
		graph[source].edges[dst] = true
	}

	//fmt.Println(n,e,graph)

	visited := make(map[int]bool, n)

	islands := 0
	for i := 1; i <= n; i++ {
		if !visited[i] {
			dfs(graph, i, visited)
			islands++
		}
	}

	fmt.Println(islands)
}
