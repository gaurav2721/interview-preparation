/*
The trick here is to realize that this is a topological sort
*/
package main

import "fmt"

func getEdge(str1, str2 string) []rune {
	n1 := len(str1)
	n2 := len(str2)
	//nmin:=min(n1,n2)
	for i, j := 0, 0; i < n1 && j < n2; i, j = i+1, j+1 {
		if str1[i] == str2[j] {
			continue
		}
		return []rune{rune(str1[i]), rune(str2[j])}
	}
	return []rune{}
}

func topoSort(m map[rune]map[rune]bool, indegree map[rune]int) (string, bool) {
	q := make([]rune, 0)
	for key, val := range indegree {
		if val == 0 {
			q = append(q, key)
			delete(indegree, key)
		}
	}
	result := make([]rune, 0)

	for len(q) > 0 {
		x := q[0]
		result = append(result, x)
		q = q[1:]
		for key, _ := range m[x] {
			indegree[key]--
			if indegree[key] == 0 {
				q = append(q, key)
				delete(indegree, key)
			}
		}
	}

	if len(indegree) == 0 {
		return string(result), true
	} else {
		return "", false
	}

}

func main() {
	words := []string{"baa", "abcd", "abca", "cab", "cad"}
	m := make(map[rune]map[rune]bool, 0)
	indegree := make(map[rune]int, 0)
	for i := 0; i < len(words)-1; i++ {
		edge := getEdge(words[i], words[i+1])
		if len(edge) > 0 {
			u := edge[0]
			v := edge[1]
			if _, ok := m[u]; !ok {
				m[u] = make(map[rune]bool, 0)
			}
			m[u][v] = true
			if _, ok := indegree[u]; !ok {
				indegree[u] = 0
			}
			if _, ok := indegree[v]; !ok {
				indegree[v] = 0
			}
			indegree[v]++
		}
	}
	fmt.Println("map", m, "indegree", indegree)

	ret, _ := topoSort(m, indegree)
	fmt.Println(ret)

}
