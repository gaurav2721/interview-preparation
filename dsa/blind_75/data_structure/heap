/*
The implementation of Peek and Pop function is different as in pop the last element is removed where as in peek the first element is returned
heap.Init , heap.Pop , heap.Push ---> heap pointer is used

For this problem , you have to balance the things
*/
type MinHeap []int

func (h MinHeap) Len() int           { return len(h) }
func (h MinHeap) Less(i, j int) bool { return h[i] < h[j] }
func (h MinHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }
func (h *MinHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}
func (h *MinHeap) Pop() interface{} {
	x := (*h)[len(*h)-1]
	*h = (*h)[:len(*h)-1]
	return x
}
func (h *MinHeap) Peek() interface{} {
	x := (*h)[0]
	return x
}

type MaxHeap []int

func (h MaxHeap) Len() int           { return len(h) }
func (h MaxHeap) Less(i, j int) bool { return h[i] > h[j] }
func (h MaxHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }
func (h *MaxHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}
func (h *MaxHeap) Pop() interface{} {
	x := (*h)[len(*h)-1]
	*h = (*h)[:len(*h)-1]
	return x
}
func (h *MaxHeap) Peek() interface{} {
	x := (*h)[0]
	return x
}

type MedianFinder struct {
	minHeap *MinHeap
	maxHeap *MaxHeap
}

func Constructor() MedianFinder {
	minh := &MinHeap{}
	maxh := &MaxHeap{}
	heap.Init(minh)
	heap.Init(maxh)
	return MedianFinder{
		minHeap: minh,
		maxHeap: maxh,
	}
}

func (this *MedianFinder) Balance() {
	//fmt.Println("Balance",this.maxHeap,this.minHeap)
	maxhl := this.maxHeap.Len()
	minhl := this.minHeap.Len()
	diff := maxhl - minhl
	if diff > 2 || diff < (-1) {
		return
	}
	if diff == 2 {
		x := heap.Pop(this.maxHeap).(int)
		heap.Push(this.minHeap, x)
	} else if diff == -1 {
		x := heap.Pop(this.minHeap).(int)
		heap.Push(this.maxHeap, x)
	}
	return
}

func (this *MedianFinder) AddNum(num int) {
	if this.maxHeap.Len() == 0 && this.minHeap.Len() == 0 {
		heap.Push(this.maxHeap, num)
	} else if this.maxHeap.Len() == 1 && this.minHeap.Len() == 0 {
		x := heap.Pop(this.maxHeap).(int)
		heap.Push(this.maxHeap, min(x, num))
		heap.Push(this.minHeap, max(x, num))
	} else {

		x := this.minHeap.Peek().(int)
		//fmt.Println("AddNum",num,this.maxHeap,this.minHeap,x)
		if num < x {
			heap.Push(this.maxHeap, num)
		} else {
			heap.Push(this.minHeap, num)
		}
		this.Balance()
	}
}

func (this *MedianFinder) FindMedian() float64 {
	maxhl := this.maxHeap.Len()
	minhl := this.minHeap.Len()
	diff := maxhl - minhl
	if diff == 1 {
		//fmt.Println(diff,this.maxHeap,this.minHeap)
		return float64(this.maxHeap.Peek().(int))
	} else if diff == 0 {
		//fmt.Println(diff,this.maxHeap,this.minHeap)
		f := float64(this.minHeap.Peek().(int) + this.maxHeap.Peek().(int))
		return f / 2
	}
	return math.MinInt32
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * obj := Constructor();
 * obj.AddNum(num);
 * param_2 := obj.FindMedian();
 */