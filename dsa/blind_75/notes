After 1st Revision --------------------------------------------------------------------------------------------------------------------------->

In case , you are having trouble coming up with a solution
1. Hmm , that is interesting I am kind of stuck here could you please give me some hint here , am I missing something
2. You may not be looking at the problem from a fresh lens, think slow
3. Appraaches that you may not think about - two pointers, sliding window , math , bit manipulation , intervals , 
5. atleast return the sample values
6. you can ask them if you can google 
7. ask specifically if that answers your question



Ds
1. Hashmap
2. Array ,  Strings
3. Linked List , Doubly Linked List 
4. stacks , queues , deques
5. 

Algorithm 
1. greedy 
2. divide and conquer / binary search
3. recursion 
4. backtracking 
5. Sliding Window && Two pointer && Counter && Bit Manipilation

Keyboard shortcuts to code quicker [For Mac]
1. Command + E - to navigate to the end of the line 
2. 

Extra tricks
- invert always invert 
- intuition from edge cases 
- can one or two problems help you solve the problem quickly [layer 1 , layer 2]
- Saving on spaces can be by using negative number if all the numbers are positive or use some extreme value , using the first row,col in matrix , isFirstRowZero -> Set Matrix Zeroes , proxy design pattern to use maps , or you can have sum[i to j] for a subarray from i to j index instead of 
- function as a variable



edgecases 
- empty input , input of 1 ,2 size  , 
- positive , negative , zero , duplicate , prefix and suffix of zeroes 
- lowercase , upperCase , special characters

weaknesses 
- ability to think of edge cases 
- ability to know time complexity and space complexity
- ability to write code snippets quickly and in less time 



1st Reading ------------------------------------------------------------------------------------------------------------------------------------>
Following is the quick strategy that you can implement to clear DSA rounds 

1. Repeat the problem
2. Ask Clarifying questions , understand examples and cover edge cases
3. Check for input output , check the constraints
4. Tell your approach(if you are stuck , you can say hmm that is interesting I am sort of blocked here, could you help me out) , then ask the interviewer if you can start to write the code 
5. Tell them you will improve readability later(by renaming variables , divide into various functions, implement design patterns , usually when you are asked Leetcode easy problem they might expect that) , while writing the code , keep the interviewer engaged as to what you are doing 
6. Run it by testcases 
7. Think about space and time complexity
8. You can atleast return the sample values provided
9. You are judged on the following parameters : Algorithm , Coding , Communication , Problem Solving
10. You can specifically ask if that answers your questions
11. Even ask them if you can google  
12. In the end thank them for giving the opportunity and ask them about the tech stack they are using 

To generate testcases
1. consider positive,negative and 0 , duplicates
2. capital , small , duplicates , special character
Points where you might fail
1. It is very important that you go and checkout a problem with a fresh mind , and not be bound to a particular approach 
2. You dont need to think fast as in the interviews the questions will not be repeated

Following is the way to approach leetcode
1. Goldilocks approach - flow state - hard and easy problem 
2. There is time till which you have to try and then you have to read solution and implement them - 60 mins time limit 
3. Read through different and better solution and see how you can improve , try to code up the solution yourself , if you are not understanding it remove that code line and see what testcases fail and why they fail
4. Quality over quantity -> try to understand the underlying problem and also neetcode 75,150, interview 150 are some problems that you need to know -> leetcode 20 80 , 20 percent of the problems get asked 80% of the times 
5. mock interviews
6. Focus on patterns

1. Clarity of thought - pseudo code
2. Clarity of communication
3. Clarity of code - code readability and maintainability


How to improve as a programmer
1. Do not try to do everything
2. Go Deep and not wide : as that is the tech stack that your will be working for and interviewing for 
3. Developing a problem solving mindset : 5 whys(different ordered thinking ) , Divide and conquer 
4. Stop obsessing over syntax , language is irrelevant , practicing with pseudo-code 
5. Write code for humans/ that is code should be readable with proper naming , try , catch , comment logs 
6. Debugging is also an important skill , unitests , attached debuggers
7. You need to improve everyday (1% improvement)
