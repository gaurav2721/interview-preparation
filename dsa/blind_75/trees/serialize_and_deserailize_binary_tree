/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

type Codec struct {
	i int
}

func Constructor() Codec {
	return Codec{
		i: 0,
	}
}

// Serializes a tree to a single string.
func (this *Codec) serialize(root *TreeNode) string {
	str := ""
	var dfs func(root *TreeNode)
	dfs = func(root *TreeNode) {
		//fmt.Println("root",root,str)
		if root == nil {
			str += "," + "NIL"
			return
		}
		str += "," + strconv.Itoa(root.Val)
		dfs(root.Left)
		dfs(root.Right)
	}
	dfs(root)
	str = str[1:]
	return str
}

// Deserializes your encoded data to tree.
func (this *Codec) deserialize(data string) *TreeNode {
	this.i = 0
	str := strings.Split(data, ",")
	var dfs func() *TreeNode
	dfs = func() *TreeNode {

		if str[this.i] == "NIL" {
			this.i = this.i + 1
			return nil
		}
		val, _ := strconv.Atoi(str[this.i])
		root := &TreeNode{
			Val: val,
		}
		this.i = this.i + 1
		root.Left = dfs()
		root.Right = dfs()
		return root
	}
	root := dfs()
	return root
}

/**
 * Your Codec object will be instantiated and called as such:
 * ser := Constructor();
 * deser := Constructor();
 * data := ser.serialize(root);
 * ans := deser.deserialize(data);
 */