/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
/*
   The inspiration for this can come from the diameter problem
    One pass DFS reduces some of the extra computation
*/

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func maxSingularPath(root *TreeNode, maxi *int) int {
	if root == nil {
		return math.MinInt32
	}
	leftSingular := maxSingularPath(root.Left, maxi)
	rightSingular := maxSingularPath(root.Right, maxi)
	if leftSingular < 0 {
		leftSingular = 0
	}
	if rightSingular < 0 {
		rightSingular = 0
	}
	*maxi = max(*maxi, root.Val+leftSingular+rightSingular)
	return root.Val + max(leftSingular, rightSingular)
}

func maxPathSum(root *TreeNode) int {
	maxi := math.MinInt32
	maxSingularPath(root, &maxi)
	return maxi
}

/* -------------------------------------------------------------------------------------------------------------------------------*/

func maxSingularPath(root *TreeNode, sumTillNow int, maxTillNow *int) {
	if root == nil {
		*maxTillNow = max(*maxTillNow, sumTillNow)
		return
	}
	sumTillNow += root.Val
	*maxTillNow = max(*maxTillNow, sumTillNow)
	maxSingularPath(root.Left, sumTillNow, maxTillNow)
	maxSingularPath(root.Right, sumTillNow, maxTillNow)
}

func maxPathSum(root *TreeNode) int {
	//fmt.Println("maxPathSum",root)
	if root == nil {
		return math.MinInt32
	} else if root.Left == nil && root.Right == nil {
		return root.Val
	}

	leftSingular := 0
	maxSingularPath(root.Left, 0, &leftSingular)
	rightSingular := 0
	maxSingularPath(root.Right, 0, &rightSingular)

	singularPath := max(max(root.Val+leftSingular, root.Val+rightSingular), root.Val+leftSingular+rightSingular)
	left := maxPathSum(root.Left)
	right := maxPathSum(root.Right)
	//fmt.Println("values",root.Val,left,right,leftSingular,rightSingular,singularPath)

	return max(max(left, right), singularPath)
}