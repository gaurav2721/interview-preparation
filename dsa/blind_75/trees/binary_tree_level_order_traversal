/*
you can either use nil as marker , or keep poppiing the q till it is of size zero and that is a level for you
*/

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func depth(root *TreeNode) int {
	if root == nil {
		return 0
	}
	return 1 + max(depth(root.Left), depth(root.Right))
}

func levelOrder(root *TreeNode) [][]int {
	//n:=depth(root)
	ret := make([][]int, 0)
	if root == nil {
		return ret
	}
	q := make([]*TreeNode, 0)
	q = append(q, root)
	level := 0

	for len(q) > 0 {
		levelInt := make([]int, 0)
		nextLevel := make([]*TreeNode, 0)
		for len(q) > 0 {
			x := q[0]
			q = q[1:]
			levelInt = append(levelInt, x.Val)
			if x.Left != nil {
				nextLevel = append(nextLevel, x.Left)
			}
			if x.Right != nil {
				nextLevel = append(nextLevel, x.Right)
			}
		}
		fmt.Println("ret", ret)
		ret = append(ret, levelInt)
		level++
		if len(nextLevel) > 0 {
			q = append(q, nextLevel...)
		}
	}

	return ret
}