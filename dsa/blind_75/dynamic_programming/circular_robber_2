/*
this is also a top down 1d approach but it is built by using the derivation of robber 1
*/
func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}
func rob1d(nums []int) int {
	n := len(nums)
	if n == 0 {
		return 0
	}
	robs := make([]int, n)
	for i := n - 1; i >= 0; i-- {
		if i == n-1 {
			robs[i] = nums[i]
		} else if i == n-2 {
			robs[i] = max(nums[i], nums[i+1])
		} else {
			robs[i] = max(nums[i]+robs[i+2], robs[i+1])
		}
	}
	fmt.Println(nums, robs)
	return robs[0]
}
func rob(nums []int) int {
	n := len(nums)
	if n == 1 {
		return nums[0]
	} else if n == 2 {
		return max(nums[0], nums[1])
	} else {
		return max(rob1d(nums[1:n]), rob1d(nums[:n-1]))
	}
}