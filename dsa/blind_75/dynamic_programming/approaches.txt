Dynamic Programming 
You can assign 2-D array ,iterate using i,j,l which is length of sub array /sub sequence , longest common subsequece is a good scenario
You can assign a 2 single dimensional array , iterate from forward and backward , have a length of 1,2
You can have length of 2d or 1d array as n or n+1
There can also be a scenario where dp approach is O(1)
There can be a bottom - up or top-bottom approachs
Create a recursive function and make changes to it to add dp
State Machine Thinking 
Whenever you are asked to find all the combinations [coin change]
    1. you have to return 0 or 1 depending upon whether you satisfy a condition or not 
    2. write down a function in terms of parameters[i,j,lenght,amount]
    3. create a base case 
    4. use recursion and backtracking and memoize it 
To optimize further , you need to see if some space is getting repeated for eg prev , curr 



If you can break the problem into recursion then you can have the db store each state
Also once you have cracked the recursion code then check 
There can be an algorithm for coming up of with a function that can setup the values as well 



Bottom up 
1. build the problem from the simplest scenario
2. f(n) = f(n-1) + f(n-2)

Top Down
1. 