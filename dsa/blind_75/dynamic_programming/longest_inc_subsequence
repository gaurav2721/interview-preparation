/*
here basically we do a bottom up change
*/
/* your approach using dp was to use inc and exc array , that included and exluded the last element 

func lengthOfLIS(nums []int) int {
	n := len(nums)
	inc := make([]int, n)
	exc := make([]int, n)
	for i := 0; i < n; i++ {
		inc[i] = 1
		exc[i] = 0
	}
	for i := 1; i < n; i++ {
		for j := i - 1; j >= 0; j-- {
			if nums[j] < nums[i] {
				inc[i] = max(inc[i], 1+inc[j])
			}

			exc[i] = max(exc[i], inc[j])
			exc[i] = max(exc[i], exc[j])
		}
	}
	fmt.Println(inc, "lis", exc)

	return max(inc[n-1], exc[n-1])
}

func lengthOfLIS(nums []int) int {
	n := len(nums)
	dp := make([]int, n)
	dp[0] = 1
	maxLength := 1
	for i := 1; i < n; i++ {
		ret := 1
		for j := 0; j < i; j++ {
			if nums[j] < nums[i] {
				ret = max(ret, 1+dp[j])
			} else {
				continue
			}
		}
		dp[i] = ret
		maxLength = max(maxLength, ret)
	}
	fmt.Println(dp)
	return maxLength
}