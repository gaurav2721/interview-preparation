1. Maximum subsequence path - recursion is enough in this , but we need to do dp of 2 index here 


func util(matrix [][]int,i,j int,dp [][]int)int{
    //fmt.Println(i,j)
    m:=len(matrix)
    n:=len(matrix[0])
    if i<0||i>=m||j<0||j>=n{
        return 0
    }
    if dp[i][j]!=-1{
        return dp[i][j]
    }

            u,b,l,r:=1,1,1,1
            if i-1>=0 && matrix[i-1][j]>matrix[i][j]{
                u+=util(matrix,i-1,j,dp)
            }
            if i+1<m && matrix[i+1][j]>matrix[i][j]{
                b+=util(matrix,i+1,j,dp)
            }
            if j-1>=0 && matrix[i][j-1]>matrix[i][j]{
                l+=util(matrix,i,j-1,dp)
            }
            if j+1<n && matrix[i][j+1]>matrix[i][j]{
                r+=util(matrix,i,j+1,dp)
            }
            //fmt.Println("loop",i,j,u,b,l,r)
            result:=max(max(u,b),max(l,r))

    dp[i][j]=result
    return dp[i][j]
}

func longestIncreasingPath(matrix [][]int) int {
    m:=len(matrix)
    n:=len(matrix[0])
    dp:=make([][]int,len(matrix))

    for i:=0;i<m;i++{
        dp[i]=make([]int,n)
        for j:=0;j<n;j++{
            dp[i][j]=-1
        }
    }
    //fmt.Println(dp)
    maximum:=1
    for i:=0;i<m;i++{
        for j:=0;j<n;j++{
            result:=util(matrix,i,j,dp)
            maximum=max(maximum,result)
        }
    }
    return maximum
}