func util(coins []int, amount int, index int, dp [][]int) int {
	n := len(coins)
	if index > n-1 || index < 0 {
		return 0
	}
	if amount == 0 {
		return 1
	} else if amount < 0 {
		return 0
	}
	if dp[amount][index] != -1 {
		return dp[amount][index]
	}
	total := 0
	for i := index; i >= 0; i-- {
		val := util(coins, amount-coins[i], i, dp)
		total += val
	}
	dp[amount][index] = total
	return total
}

func change(amount int, coins []int) int {
	sort.Ints(coins)
	dp := make([][]int, amount+1)
	for i := 0; i < amount+1; i++ {
		dp[i] = make([]int, len(coins))
	}
	for i := 0; i < amount+1; i++ {
		for j := 0; j < len(coins); j++ {
			if i == 0 {
				dp[0][j] = 0
			} else {
				dp[i][j] = -1
			}
		}
	}
	if amount == 0 {
		return 1
	}
	util(coins, amount, len(coins)-1, dp)
	fmt.Println(dp)
	return dp[amount][len(coins)-1]
}