/*
You still have to deeply understand this algo
*/

/*
2 3 -2 4
1 2 3 0 -2 -8
1 2 6 0 1 16
1 1 1 0 -2 -8
*/
func maxProduct(nums []int) int {
	n := len(nums)
	maxProd := nums[0]
	currMinProd := 0
	currMaxProd := 0
	for i := 0; i < n; i++ {
		if currMinProd == 0 {
			currMinProd = 1
		}
		if currMaxProd == 0 {
			currMaxProd = 1
		}
		if nums[i] < 0 {
			currMinProd, currMaxProd = currMaxProd, currMinProd
		}
		currMinProd = min(nums[i], currMinProd*nums[i])
		currMaxProd = max(nums[i], currMaxProd*nums[i])
		maxProd = max(maxProd, currMaxProd)
		fmt.Println(i, currMinProd, currMaxProd, maxProd)
	}
	return maxProd
}

func maxProduct(nums []int) int {
	minval := nums[0]
	maxval := nums[0]
	maxproduct := nums[0]
	for i := 1; i < len(nums); i++ {
		if nums[i] < 0 {
			minval, maxval = maxval, minval
		}
		minval = int(math.Min(float64(nums[i]), float64(minval*nums[i])))
		maxval = int(math.Max(float64(nums[i]), float64(maxval*nums[i])))
		if maxval > maxproduct {
			maxproduct = maxval
		}
	}
	return maxproduct
}

