/*
sorting condition is extremely important
When can Merge does not take boundary into account canMerge condition is this
after detecting that it can merge we have to choose which to let go
whichever has its end larger will be let go

Neetcode's approach is good as well so check that out
*/
func canMerge(interval1 []int, interval2 []int) bool {
	if interval2[0] > interval1[0] && interval2[0] < interval1[1] || interval2[1] > interval1[0] && interval2[1] < interval1[1] {
		return true
	}
	if interval1[0] == interval2[0] && interval1[1] == interval2[1] {
		return true
	}
	return false
}

func eraseOverlapIntervals(intervals [][]int) int {
	sort.Slice(intervals, func(i int, j int) bool {
		if intervals[i][0] < intervals[j][0] {
			return true
		} else if intervals[i][0] == intervals[j][0] {
			return intervals[i][1] < intervals[j][1]
		} else {
			return false
		}
	})
	fmt.Println(intervals)
	n := len(intervals)
	//count:=0
	output := make([][]int, 0)
	output = append(output, intervals[0])
	for i := 1; i < n; i++ {
		back := canMerge(intervals[i], output[len(output)-1]) || canMerge(output[len(output)-1], intervals[i])
		//fmt.Println("i",i,output,"back",back)
		if back {
			if intervals[i][1] >= output[len(output)-1][1] {
				continue
			} else {
				output := output[:len(output)-1]
				output = append(output, intervals[i])
			}
		} else {
			output = append(output, intervals[i])
			continue
		}
	}
	//fmt.Println(output)
	return len(intervals) - len(output)
}