/*
You can have two arrays left and right
to reduce space complexity you can have two pointers maxL and maxR , and left and right pointers
*/
func trap(height []int) int {
	n := len(height)
	if n == 1 || n == 2 {
		return 0
	}

	left := make([]int, n)
	left[0] = 0
	right := make([]int, n)
	right[n-1] = 0
	for i := 1; i < n; i++ {
		left[i] = max(left[i-1], height[i-1])
	}
	for j := n - 2; j >= 0; j-- {
		right[j] = max(right[j+1], height[j+1])
	}

	amount := 0
	//fmt.Println(left,right)
	for i := 1; i < n-1; i++ {
		minHeight := min(left[i], right[i])
		if minHeight-height[i] > 0 {
			amount += (minHeight - height[i])
		}
		//fmt.Println(amount,minHeight)
	}

	fmt.Println(amount)
	return amount
}