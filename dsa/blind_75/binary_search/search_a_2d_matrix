func util(matrix [][]int, index int) int {
	m := len(matrix)
	n := len(matrix[0])
	if index < 0 || index >= m*n {
		return math.MinInt32
	}
	mIndex := index / n
	nIndex := index % n
	return matrix[mIndex][nIndex]
}

func dac(matrix [][]int, target int, start, end int) bool {
	m := len(matrix)
	n := len(matrix[0])
	if start < 0 || end >= m*n || start > end {
		return false
	}
	mid := (end + start) / 2
	midPoint := util(matrix, mid)

	if midPoint == target {
		return true
	} else if target < midPoint {
		return dac(matrix, target, 0, mid-1)
	} else {
		return dac(matrix, target, mid+1, end)
	}
}

func searchMatrix(matrix [][]int, target int) bool {
	m := len(matrix)
	n := len(matrix[0])
	return dac(matrix, target, 0, m*n-1)
}