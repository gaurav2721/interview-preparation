
func util(nums1 []int, start1 int, nums2 []int, start2 int, k int) int {
	fmt.Println(start1, start2, k)
	if start1 >= len(nums1) {
		return nums2[start2+k]
	}
	if start2 >= len(nums2) {
		return nums1[start1+k]
	}
	if k == 0 {
		return min(nums1[start1], nums2[start2])
	}
	idx1 := min(start1+(k-1)/2, len(nums1)-1)
	idx2 := min(start2+(k-1)/2, len(nums2)-1)
	if nums1[idx1] < nums2[idx2] {
		//fmt.Println("small",idx1,idx2,nums1[idx1],nums2[idx2])
		return util(nums1, idx1+1, nums2, start2, k-(idx1-start1+1))
	} else {
		//fmt.Println("large",idx1,idx2,nums1[idx1],nums2[idx2])
		return util(nums1, start1, nums2, idx2+1, k-(idx2-start2+1))
	}
	//return 0
}

func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	m := len(nums1)
	n := len(nums2)
	k := (m + n) / 2
	if (m+n)%2 == 1 {
		e1 := util(nums1, 0, nums2, 0, k)
		return float64(e1)
	} else {
		e1 := util(nums1, 0, nums2, 0, k)
		//fmt.Println("e",e1)
		e2 := util(nums1, 0, nums2, 0, k-1)
		//fmt.Println("e",e2)
		return float64(e1+e2) / 2
	}
}