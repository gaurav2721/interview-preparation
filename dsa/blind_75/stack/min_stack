/* the trick here is to have two stacks one that stores the values and the other that stores the minIndex */
type MinStack struct {
	st  []int
	min []int
}

func Constructor() MinStack {
	return MinStack{
		st:  make([]int, 0),
		min: make([]int, 0),
	}
}

func (this *MinStack) Push(val int) {
	this.st = append(this.st, val)
	if len(this.min) > 0 {
		minIndex := this.min[len(this.min)-1]
		minVal := this.st[minIndex]
		if val < minVal {
			this.min = append(this.min, len(this.st)-1)
		} else {
			this.min = append(this.min, this.min[len(this.min)-1])
		}
	} else {
		this.min = append(this.min, len(this.st)-1)
	}
}

func (this *MinStack) Pop() {
	// _:=this.st[len(this.st)-1]
	this.min = this.min[:len(this.min)-1]
	this.st = this.st[:len(this.st)-1]
}

func (this *MinStack) Top() int {
	val := this.st[len(this.st)-1]
	return val
}

func (this *MinStack) GetMin() int {
	return this.st[this.min[len(this.min)-1]]
}

/**
 * Your MinStack object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(val);
 * obj.Pop();
 * param_3 := obj.Top();
 * param_4 := obj.GetMin();
 */
