func operation(a int,b int,operator string)int{
    switch operator{
        case "+":
        return a+b
        case "-":
        return a-b
        case "*":
        return a*b
        case "/":
        return a/b
    }
    return math.MinInt64
}

func Contains(expressions []string,str string)bool{
    ret:=false
    for _,expression:=range expressions{
        if expression==str{
            ret=true
        }
    }
    return ret
}

func evalRPN(tokens []string) int {
    stack:=make([]int,0)
    n:=len(tokens)
    expressions:=[]string{"+","-","*","/"}
    for i:=0;i<n;i++{
        if !Contains(expressions,tokens[i]){
            num,_:=strconv.Atoi(tokens[i])
            stack=append(stack,num)
            continue
        }
        a:=stack[len(stack)-2]
        b:=stack[len(stack)-1]
        stack=stack[:len(stack)-2]
        stack=append(stack,operation(a,b,tokens[i]))
    }
    return stack[0]
}