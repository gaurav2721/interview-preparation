func mapContains(ms, mt map[byte]int) bool {
	ret := true
	for k, v := range mt {
		if ms[k] < v {
			ret = false
			break
		}
	}
	return ret
}

func minWindow(s string, t string) string {
	ns := len(s)
	nt := len(t)
	ret := ""
	if nt > ns {
		return ret
	}

	mt := make(map[byte]int, 0)
	for i := 0; i < nt; i++ {
		mt[t[i]]++
	}

	start, end := 0, nt-1
	ms := make(map[byte]int, 0)
	for i := start; i <= end; i++ {
		ms[s[i]]++
	}

	for start <= end && end < ns {
		//fmt.Println("loop",start,end,ms,mt,ret)
		if mapContains(ms, mt) {
			if len(ret) == 0 {
				ret = s[start : end+1]
			} else if end-start+1 < len(ret) {
				ret = s[start : end+1]
			}
			ms[s[start]]--
			start++
		} else {
			end++
			if end < ns {
				ms[s[end]]++
			}
		}
	}

	return ret

}