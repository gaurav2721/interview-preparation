/*
what we can learn from here is how to use ok variable and if condition in the same line
Knowing how to implement search function is very important
        index:=sort.Search(len(temp),func (j int)bool{
            if temp[j]>=rem{
                return true
            }
            return false
        })
Another approach can that of be a two pointer approach , if the array is sorted
*/

/*this method is the best */
func twoSum(nums []int, target int) []int {
	result := make([]int, 0)
	visited := make(map[int]int, 0)
	for i, num := range nums {
		if index, ok := visited[target-num]; ok {
			result = append(result, i)
			result = append(result, index)
		} else {
			visited[num] = i
		}
	}
	return result
}

func twoSum(numbers []int, target int) []int {
	n := len(numbers)
	start := 0
	end := n - 1
	ret := make([]int, 0)
	for start < end {
		if numbers[start]+numbers[end] == target {
			ret = append(ret, start+1)
			ret = append(ret, end+1)
			break
		} else if numbers[start]+numbers[end] > target {
			end--
		} else {
			start++
		}
	}
	return ret
}

/*
Modified 2 sum
*/
func twoSum(nums []int, target int) []int {
	n := len(nums)
	for i := 0; i < n-1; i++ {
		rem := target - nums[i]
		temp := nums[i+1:]
		index := sort.Search(len(temp), func(j int) bool {
			if temp[j] >= rem {
				return true
			}
			return false
		})
		//fmt.Println(temp,rem,index,i)
		if (index >= 0 && index < len(temp)) && nums[index+i+1] == rem {
			return []int{i + 1, index + i + 2}
		}
	}
	return []int{}
}

/*this is another way */
func twoSum(nums []int, target int) []int {
	n := len(nums)
	arr := make([][2]int, 0)
	for i, num := range nums {
		arr = append(arr, [2]int{num, i})
	}
	sort.Slice(arr, func(i, j int) bool {
		return arr[i][0] < arr[j][0]
	})
	//fmt.Println(arr)
	start, end := 0, n-1
	for start < end {
		if arr[start][0]+arr[end][0] == target {
			return []int{arr[start][1], arr[end][1]}
		} else if arr[start][0]+arr[end][0] > target {
			end--
		} else {
			start++
		}
	}
	return []int{}
}