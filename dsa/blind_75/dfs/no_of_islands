/*
This is a very basic way to do dfs
*/
func populate(grid [][]int,i,j,noi int){
    m:=len(grid)
    n:=len(grid[0])
    if i<0 || i>=m || j<0 || j>=n {
        return
    }
    if grid[i][j]>1{
        return
    }else if grid[i][j]==1{
        grid[i][j]=noi
        populate(grid,i-1,j,noi)
        populate(grid,i,j+1,noi)
        populate(grid,i+1,j,noi)
        populate(grid,i,j-1,noi)
    }else{
        return
    }
}

func numIslands(tempGrid [][]byte) int {
    m:=len(tempGrid)
    n:=len(tempGrid[0])
    grid:=make([][]int,m)
    for i:=0;i<m;i++{
        grid[i]=make([]int,n)
    }
    for i:=0;i<m;i++{
        for j:=0;j<n;j++{
            grid[i][j]=int(tempGrid[i][j])-48
        }
    }
    fmt.Println(grid)

    noi:=1

    for i:=0;i<m;i++{
        for j:=0;j<n;j++{
            if grid[i][j]==0{
                continue
            }else if grid[i][j]==1{
                noi++
                populate(grid,i,j,noi)
                //fmt.Println(grid)
            }else{
                continue
            }
        }
    }
    return noi-1
}